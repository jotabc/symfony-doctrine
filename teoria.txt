!!! Conecciones con diff DB !!!.-

  ! CONCEPTOS IMPORTANTES !.-
    - Normalmente debería ser la responsabilidad de la app, osea de nuestro código generar un id a
      nuestras entidades, y no delegar esa funcionalidad al DB, por lo cual debemos de nosotros mismo
      generar nuestras ids. Es recomendable dejar esa función a nuestra DB cuando nuestras tablas
      no sean accesibles desde fuera, osea no esten expuestas en una API, si no lo más común es
      generar uuid o uid para nuestros ids de entidades. Desde la version 5 de symfony hay un componente de symfony para esta función:
        - composer require symfony/uid

  - MYSQL:
    docker-compose.yml servicio:
      sf-doctrine-db:
        container_name: sf-doctrine-db
        image: mysql:8.0.26
        ports:
            - 10000:3306
        environment:
            MYSQL_DATABASE: database
            MYSQL_ROOT_PASSWORD: root
        volumes:
            - sf-doctrine-db-data:/var/lib/mysql
        networks:
            - sf-doctrine-network
        command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']

    archivo .env:
    DATABASE_URL="mysql://root:root@sf-doctrine-db:3306/database?serverVersion=8.0&charset=utf8mb4"

  - POSTGRES
    docker-compose.yml servicio:
      sf-doctrine-bd-postgres:
        container_name: sf-doctrine-bd-postgres
        image: postgres:13.3
        ports:
          - 5432:5432
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        volumes:
          - sf-doctrine-db-data-postgres:/var/lib/postgresql/data

    archivo .env:
    DATABASE_URL="postgresql://postgres:postgres@sf-doctrine-bd-postgres:5432/postgres?serverVersion=13&charset=utf8"

  - SQLITE.- Para este no necesitamos nosotros un servico de docker, porque sqlite guarda
      directamene los archivos en nuestra maquina local.

      archivo .env:
      DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
      Como vemos qui lo va a guardar en la raíz del projecto carpeta var/data.db, este 
      data.db lo podemos guardar por cualquier nombre si no lo dejamos por defecto.

!!! Referencia de configuración !!!.- 
  - php bin/console config:dump-reference doctrine
    Este nos muestra todas las opciones de configuración de doctrine en symfony.

  - php bin/console debug:config doctrine
    Esta nos muestra las configuraciones que tenemos actualmente en nuestra app.
    Estas referencias estan en la carpeta config/packages/doctrine.yaml

    doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        # server_version: '16' esta opcion debe ser colocada si en nuestro .env en la
          variable no esta colocada el serverVersion, como mysql o postgres, es 
          usarlo en el .env porque así cualquier programador puede usar una version especifica => DATABASE_URL="mysql://root:root@sf-doctrine-db:3306/database?serverVersion=8.0&charset=utf8mb4"
        use_savepoints: true
    orm: Aqui es donde van a estar nuestras entidades (ubicación)
        auto_generate_proxy_classes: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        auto_mapping: true
        mappings:
            App:
                is_bundle: false
                type: annotations => el tipo que tendra annotation, attributes, xml
                  por defecto es attributes.
                  Si usamos anotaciones debemos instalar:
                    composer require doctrine/annotations
                dir: '%kernel.project_dir%/src/Entity' ubicación del archivo donde están.
                prefix: 'App\Entity' => el prefijo donde están ubicados. (namespace)
                alias: App
      Lo más recomandable a día de hoy y como viene por defecto el mapeo de entidades es por
      attributes. Aunque nuestra entidad este mapeado con attributes o annotations nuestra
      entidad se hace muy muy enorme es la deventaja.
      Para evitar esto podemos hacer es usar xml para las entidades de doctrine, otro archivo
      yml para el tema de validaciones y así la clase User quedaría muy limpia.
      Si usamos xml lo que debemos es de actualizar nuestra configuración en el doctrine.yaml
        mappings:
            App:
              is_bundle: false
              type: xml
              dir: '%kernel.project_dir%/config/orm/mapping' ubicación del archivo de mapeo.
              prefix: 'App\Entity' => el prefijo donde están ubicados. (namespace)
              alias: App


!!! MAKER BUNDLE !!!.- Con esto podemos crear entidades, commandos symfony, controladores
  crus, formularios etc etc, podemos crear muchas muchas cosas con el comando maker.
  - Instalación
    composer require --dev symfony/maker-bundle

  - Este comando nos mostrará los comandos y las cosas que podemos generar con maker:
    bin/console make -h

    bin/console make:entity este es un comando "mágico", que crea por nosotoros las entidades
      cons los diff tipos de campos que le coloquemos, nos crea incluso el Repository donde
      van nuestras consultas y metodos del sb como save, remove etc, pero no es muy recomendable
      usarlo porque nos crea automaticamente las cosas e incuso si nosotros no queremos
      por ejm que el id sea un autoincrement que lo crea por defecto, si no un uuid por
      ejm, entonces ya crea cosas que nosotros no le pedimos, lo recomandable es ir haciendo
      paso por paso y mapeando acorde a nuestras necesidades cada entidad y Repository.
      El make:entity tampoco nos crea el constructor que es una de las cosas que deberiamos
      tener en cada entidad, que sería las variables que necesita mi entidad para crear una
      instancia de si misma por ejm crear un user

      public function __construct(string $name)
      {
        $this->name = $name
      }
      Con esto le tenemos que pasar si o si a nuestra instacia o creacion de un usuario el
      name como obligado.
      El driver de yml se va a declarar obsoleto en orm 3.

!!! MIGRATIONS !!!.-
  Todos los comandos usan deben usar bin/console

  - doctrine:migrations:diff 
    Este comando sirve para generar una migracion comprobando el estado del db con nuestra
    información de mapping.

  - make:migration.- Esto genera una migración con los cambios, esto es equivalente al
    comando doctrine:migrations:diff este es de doctrine y el make:migrations de maker.

  - doctrine:migrations:generate.- Esto genera una migración en blanco.


!!! XML !!!.- Es muy util este lenguaje por decirlo de una manera para el mapeo de nuestras entidades
  lo que nos permite es agrupar nuestro mapeo completo de las entidades separadas de la clase, nos
  permite hacer todo como crear columnas indicies, unique constraints etc etc:

  - Para crear un campo id
    <id name="id" type="integer" column-definition="INT UNSIGNED NOT NULL">
    <!-- por defecto es strategy="AUTO" que sería para los ids autoincrementables -->
        <generator /> 
    </id>

  - Para crear un campo normal:
    <!-- por defector el type="string" es string -->
    <field name="email" length="100" />

  - Para crear unique constraints
    <unique-constraints>
      // podemos crear los unique U_email_user = U de unique, email nombre de columna, user nombre de tabla 
        <unique-constraint name="U_email_user" columns="email" />
    </unique-constraints>

  - Para crear index:
    <indexes>
    // podemos crear los index I_email_user = I de index,email nombre columna, user nombre de tabla 
      <index name="I_name_user" columns="name" />
    </indexes>

!!! LIFECYCLES EVENTS !!!.- Son eventos que provee doctrine y que nos permite ejecutar cierta lógica
  cuando se ejecuta algun estado del ciclo de vida de una entidad y son los más usados:
    - preRemove.- Este evento ocurre cuando el EntityManager va ha hacer una operación de eliminar
      de una entidad, si se usa DQL con un DELETE statement no funcionará, es decir solo funciona
      cuando se invoca el mètodo remove del EntityManager sobre una entidad.

    - postRemove.- Igual que el preRemove solo que ocurre después de eliminar.
    - prePersist.- Ocurre antes de persistir una entidad.
    - postPersist.- Ocurre después de persistir una entidad.
    - preUpdate.- Ocurre antes de que se actualice una entidad, este es uno de los más comunmente
      usados
    - postUpdate.- Ocurre después de que se actualice una entidad, este es uno de los más comunmente
      usados
      

!!! REPOSITORIOS Y TIPOS DE QUERIES !!!.-
  - Repositorios.- Como reoomendación no es tan recomendable usar directamente los métods
    como el find, findOne, findAll, findBy etc etc, si usamos esto estamos acoplamos
    doctrine a nuestros servicios y no es viable, osea nuestra lógica de negocio no debería
    conocer que es lo que esta por detrás guardando la DB ni de dond vienen los datos.
    Para solucionar esto podemos crear un clase abstracta o una interface donde podemos
    alojar todos nuestros métodos de que queremos que se sirvan al repositorio.

  - Consultas a doctrine (Tipos de queries).-
    - Doctrine ORM(Object-Relational Mapping).- Está sería la capa superior que tiene todos estos
      métodos que nos van a permitir trabajar con nuestras DB como si fueran entidades
      de nuestro dominio.

      VENTAJAS:
        - Cuando generamos las lineas de queries no importa el orden si no que, osea no
          mecesita ir en orden por ejm para trabajr con filtros es ideal, podemos ir 
          añadiendo condiciones osea if, y en base a dichas condiciones ir construyendo la
          query.

      DEVENTAJAS:
        - Es un poco más tardado en queries porque lo primero que hace es transformar 
          nuestras entidades a objetos, entonces tenemos que hacer un montón de joins,
          wheres, entonces tiene que ir obteniendo los resultados, ir hidratando los
          objetos y luego mostrarlos y en performance puede ser muy costoso en nuestra app. 

    - Doctrine DBAL.- Es una abstracción de doctrine para trabajar con DB está un poco más
      bajo nivel, y lo que hace es saltarse esta parte de trabajar con objectos por lo que
      sería un poquito más rápido.
      VENTAJA:
        - Para queries muy complejas, porque lo que vamos ha hacer es simplemente usar
          la conección de la DB para ejecutar queries directamente. 

    - PDO.- Ya no utilizada a día de hoy, es la librería base que conecta php con
      mysql.
  Tenemos los ejmplos en el DoctrineUserRepository.php

!!! RELATIONS !!!.-
  - oneToOne.- Existe la unidireccional y bidireccional, que la unica diff es que la
    unidireccional solo se puede acceder desde el lado de la entiedad que tiene la
    relación por ejm un User tiene un perfil, entonces solo desde el usuario podemos
    obtener dicho perfil, la bidireccional sería desde ambos lados es decir que 
    User tiene el perfil y el Perfil tiene el User ejm
      - <entity name="App\Entity\User">
          <one-to-one field="profile" target-entity="App\Entity\Profile" mapped-by="user" />
        </entity>
       - <entity name="App\Entity\Profile">
          <one-to-one field="user" target-entity="App\Entity\User" inversed-by="profile">
            <join-column name="customer_id" referenced-column-name="id" />
            // Estos valores como name y referenced-column-name son redundates si en nuestra
              entidad se llaman igual son usados cuando por ejm se llama id_user. Y si usamos
              los valores por defecto podemos hacer autoclose:
                <one-to-one field="user" target-entity="App\Entity\User" inversed-by="profile" />
          </one-to-one>
        </entity>
    En este ejmplo vemos que tenemos el:
      - mapped-by.- El mapped-by sería la entidad principal en este caso User.php
      - inversed-by.- El inversed-by sería la entidad principal en este caso Profile.php
  
  - oneToOne self-referencing.- Son relaciones uno a uno osea una entidad sobre si misma, por
    ejm tenemos una entidad Student y un campo mentor, esta tiene relación consigo misma porque
    un estudiante pueden ser mentores de otros estudiantes.



!!! COMANDOS UTILES !!!.- todos usan php bin/console o bin/console:
  - doctrine:mapping:info.- Muestra la información de nuestros archivos de mapeo.
  - doctrine:schema:validate.- Compara mis archivos de mapeo con la estructura de la
    DB para ver si están bien, también es muy útil porque me va a decir si tengo
    alguna relación mal creada.


!!! NOTAS !!!.-
  - Un índice se define para que las busquedas sean más rápidas.
  - Si doctrine no detecta ningún cambio en nuestro db no hará ninguna petición de guardar obligado
    actualizar.